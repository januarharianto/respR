% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_rate.int.R
\name{calc_rate.int}
\alias{calc_rate.int}
\title{Run calc_rate on multiple replicates in intermittent-flow respirometry data}
\usage{
calc_rate.int(
  x,
  starts = NULL,
  ends = NULL,
  from = NULL,
  to = NULL,
  by = "time",
  plot = TRUE,
  ...
)
}
\arguments{
\item{x}{object of class \code{inspect} or \code{data.frame}. This is the timeseries of
paired values of oxygen against time containing multiple replicates from
which to calculate rates.}

\item{starts}{Integer(s). Row locations of the start of each replicate, or if
a single value a regular interval in rows of how replicates are spaced
starting from row 1.}

\item{ends}{Integer(s). Locations of the end of each replicate. Optional.
Should be same length as \code{starts}. If a vector, this is the row number of
the end of each replicate, if a single value it represents the length in
rows of the replicates. If not entered, the function assumes each replicate
ends at the row preceding the start of the next or for the final replicate
the final row of the dataset.}

\item{from}{numeric. Start time, row, or oxygen value within each replicate
over which to calculate rate. See \code{calc_rate()}. Time and row values are
relative to each replicate as subset using \code{starts} and \code{ends}. See
Details.}

\item{to}{numeric. End time, row, or oxygen value within each replicate over
which to calculate rate. See \code{calc_rate()}. Time and row values are
relative to each replicate as subset using \code{starts} and \code{ends}. See
Details.}

\item{by}{string. \code{"time"}, \code{"row"}, or \code{"oxygen"}. Defaults to \code{"time"}.
Method by which \code{from} and \code{to} are applied within each replicate. See
\code{calc_rate()}.}

\item{plot}{logical. Default is \code{TRUE}. Plots the results. See 'Plotting'
section for details.}

\item{...}{Allows additional plotting controls to be passed, such as \code{type},
\code{pos}, \code{legend}, and \code{quiet}.}
}
\value{
Output is a \code{list} object of class \code{calc_rate.int} containing a
\code{calc_rate} object for each replicate in \verb{$results}. The output also
contains a \verb{$summary} table which includes the full rate regression results
from each replicate with replicate number indicated by the \verb{$rank} column.
It also contains a \verb{$rate} element which contains the rate values from each
replicate. The function call, inputs, and other metadata are also included.
Note, that if you have many replicates this object can be rather large
(several MB).
}
\description{
\code{calc_rate.int} allows you to run the \code{calc_rate()} function on multiple
replicates in intermittent-flow respirometry. This allows you to use
consistent selection parameters, for example a time range, row range, or
oxygen range to extract a single rate from each replicate.
}
\details{
\code{calc_rate.int} uses the \code{starts} and optional \code{ends} inputs to subset each
replicate, then run \code{calc_rate} on the subset, saving the result, and
extracting the rate and other data to a summary table.

The \code{x} Input should be an\code{inspect} object or two-column data frame
containing paired values of time and oxygen from an intermittent-flow
experiment in columns 1 and 2 respectively. If a multiple column dataset is
entered as \code{x} the first two columns are selected by default. If these are
not the intended data use \code{inspect} to select the correct time and oxygen
columns.
\subsection{Specifying replicate structure}{

The \code{starts} input specifies the locations of the start of each replicate in
the data in \code{x}. This can be in one of two ways:
\itemize{
\item A single numeric value representing a regular interval in rows starting at
row 1 indicating how replicates are spaced. This option should only be used
when replicates cycle at regular intervals of row numbers. If the first
replicate does not start at row 1, the data should be subset so that it does
(see \code{subset_data()}) and example \url{here}.
\item A numeric vector of row locations indicating the start row of each
individual replicate. The first replicate does not have to start at row 1.
This option can also be used to specify a regular replicate structure (as
above) using regular \code{R} syntax such as \code{seq()} or \code{1:10}, etc.
}

The \code{ends} input is optional and can be used to specify the end row of each
replicate, for example to exclude flush periods. If \code{ends = NULL} (the
default) it is assumed each replicate end row is the row preceding the start
of the next replicate as specified in the \code{starts} input, or in the case of
the last replicate the final row of the dataset. If you specify replicate
\code{ends} you can do it in two ways which must match how \code{starts} has been
entered:
\itemize{
\item If \code{starts} is a single numeric value specifying the row interval of
replicates, this is a numeric value specifying the \emph{length} in rows of each
replicate. This is added to each \code{starts} location internally to get the end
locations of each replicate.
\item If \code{starts} is a vector of row locations of the start of each replicate,
this should be a vector of equal length of the end row locations of each
individual replicate.
}
}

\subsection{Rate region selection within replicates}{

Once the function subsets each replicate it calculates a rate within it using
\code{calc_rate}. By default the rate is calculated over the whole replicate,
however the \code{from}, \code{to}, and \code{by} inputs can be used to specify a region
within each replicate in terms of row, time, or oxygen ranges.

For \code{by = "time"} and \code{by = "row"} the \code{from} and \code{to} inputs are \emph{relative}
to the start of the subset replicate, not the original input data values. For
example, \verb{from = 2, to = 10, by = "time"} will determine rate from the actual
replicate \verb{start time + 2} to \verb{start time + 10} within every replicate,
regardless of the actual time values. See Examples.

See \code{calc_rate()} for full details of how selection inputs are applied.
Briefly, for all methods if any \code{from} or \code{to} values lie outside the range
of the replicate data or do not match exactly to a value within it, the
closest value is used instead (accounting for the fact that \code{from} and \code{to}
inputs are treated as relative within each replicate).
}

\subsection{More details}{

Only a single rate can be extracted from each replicate. If you need to
extract multiple rates from single replicates use \code{subset_data()} and
\code{calc_rate()} which will accept multiple \code{from} and \code{to} inputs. Similarly,
the rate is extracted from the same region of each replicate as determined
via the \code{from} and \code{to} inputs. See vignettes on the website for examples of
alternative ways of iterating \code{calc_rate} across multiple replicates if you
need to get around these constraints.
}

\subsection{Plot}{

If \code{plot = TRUE} (the default), the result for each replicate is plotted on a
grid up to a maximum of 20. Which replicates are plotted can be selected
using the \code{pos} input (default is 1:20), either in the main function call or
when calling \code{plot()} on output objects.

There are three ways of plotting the results, which can be selected using the
\code{type} input:
\itemize{
\item \code{type = "rep"}: The default. Each individual replicate is plotted with the
rate region highlighted.
\item \code{type = "full"}: Each replicate rate is highlighted in the context of the
whole dataset. May be quite difficult to interpret if dataset is large.
\item \code{type = "cr"}: Plots individual replicate results as \code{calc_rate} objects.
}

For all types \code{pos} can be used to select which replicate(s) to plot.
}

\subsection{S3 Generic Functions}{

Saved output objects can be used in the generic S3 functions \code{plot()},
\code{print()}, \code{summary()}, and \code{mean()}.
\itemize{
\item \code{plot()}: plots the result. See Plot section above.
\item \code{print()}: prints the result of a single replicate, by default the first.
Others can be printed by passing the \code{pos} input. e.g. \code{print(x, pos = 2)}
\item \code{summary()}: prints summary table of all results and metadata, or those
specified by the \code{pos} input. e.g. \code{summary(x, pos = 1:5)}. The \verb{$rank}
column numbers represent the replicate number. The summary table can be
exported as a separate data frame by passing \code{export = TRUE}.
\item \code{mean()}: calculates the mean of the rates from every replicate, or those
specified by the \code{pos} input. e.g. \code{mean(x, pos = 1:5)} The mean can be
exported as a numeric value by passing \code{export = TRUE}.
}
}

\subsection{More}{

For additional help, documentation, vignettes, and more visit the \code{respR}
website at \url{https://januarharianto.github.io/respR/}
}
}
\examples{
\donttest{
# Irregular replicate structures ------------------------------------------

# Inspect the data to use in examples
urch_insp <- inspect(intermittent.rd)

# Calculate rate across each entire replicate
# This leads to erroneous rates because the flush is included
calc_rate.int(urch_insp,
              starts = c(1, 2101, 3751))

# So instead we also specify the replicate end rows
calc_rate.int(urch_insp,
              starts = c(1, 2101, 3751),
              ends = c(1900, 3550, 4831))

# However, we usually don't want to use the entire replicate.
# So we can specify a rate region over which to extract a rate in every
# replicate in one of three ways:
#
# By time
calc_rate.int(urch_insp,
              starts = c(1, 2101, 3751),
              ends = c(1900, 3550, 4831),
              from = 300,
              to = 1200,
              by = "time")
# By row
calc_rate.int(urch_insp,
              starts = c(1, 2101, 3751),
              ends = c(1900, 3550, 4831),
              from = 100,
              to = 500,
              by = "row")
# By oxygen
urch_res <- calc_rate.int(urch_insp,
                          starts = c(1, 2101, 3751),
                          ends = c(1900, 3550, 4831),
                          from = 7.0,
                          to = 6.7,
                          by = "oxygen")

# Regular replicate structures --------------------------------------------

# If replicates cycle at regular intervals, 'starts' can be used to specify the
# spacing in rows, starting at row 1. Therefore data must be subset first so
# that the first replicate starts at row 1.
#
# Subset and inspect data
zeb_insp <- zeb_intermittent.rd |>
  subset_data(from = 5840,
              to = 75139,
              by = "row",
              quiet = TRUE) |>
  inspect()

# Calculate a rate from same 6-minute time region in every replicate.
# Replicates start every 660 rows.
# 'ends' is used to exclude the flush by specifying each is 540 rows long
calc_rate.int(zeb_insp,
              starts = 660,
              ends = 540,
              from = 120,
              to = 480,
              by = "time",
              plot = TRUE)

# We don't necessarily need to specify the 'ends', because in this case our
# time region excludes the flush anyway.
zeb_res <- calc_rate.int(zeb_insp,
                         starts = 660,
                         from = 120,
                         to = 480,
                         by = "time",
                         plot = TRUE)

# S3 functions ------------------------------------------------------------

# Outputs can be used in print(), summary(), and mean().
# 'pos' can be used to select replicate ranges
summary(zeb_res)
mean(zeb_res, pos = 1:5)

# There are three ways by which the results can be plotted.
# 'pos' can be used to select replicates to be plotted.
#
# type = "rep" - the default. Each replicate plotted on a grid with rate
# region highlighted (up to a maximum of 20).
plot(urch_res)

# type = "full" - each replicate rate region plotted on entire data series.
plot(urch_res, pos = 1:2, type = "full")
# Of limited utility when datset is large
plot(zeb_res, pos = 10, type = "full")

# type = "cr" - the 'calc_rate' object for selected replicates in 'pos' is plotted
plot(urch_res, pos = 2, type = "cr")

# See vignettes on website for how to adjust and convert rates from calc_rate.int
}
}
